@page "/product"

@using Product.InventoryManagement.Application.DTOs
@using Product.InventoryManagement.BlazorUI.Models
@using Product.InventoryManagement.BlazorUI.Services.Contracts;
@using Product.InventoryManagement.BlazorUI.Components.Common;
@using ProductItem = Product.InventoryManagement.Domain.Entities.Product;
@using System.Threading.Tasks
@rendermode InteractiveServer
@inject HeaderDataService headerDataService;
@inject IProductService productService;

<div>
    <span>This is where you can efficiently oversee your inventory by adding, editing, or removing products with ease</span>
    <div class="flex justify-between">
        <div>
            <input type="text" placeholder="Search">
        </div>
        <div>
            <Button HandeOnClick="() => ShowCreateModal = true" Label="Add New Product" Type="normal"/>
        </div>
    </div>
    <table class="w-full">
        <thead class="text-xs text-gray-800 border-b-1 border-b-gray-300 table-header-group">
            <tr>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Product ID</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Name</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Description</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Price</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Stock</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Date Added</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Last Modified</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Action</th>
            </tr>
        </thead>
        <tbody>
        @if(products == null)
        {
            <div>
                    <span class="text-gray-500">Loading products...</span>
            </div>
        } else
        {
            @foreach (var product in products)
            {
                <tr class="even:bg-gray-100 odd:bg-white">
                    <td class="p-4 text-xs text-gray-700 text-left">@product.Id</td>
                    <td class="p-4 text-xs text-gray-700 text-left">@product.Name</td>
                    <td class="p-4 text-xs text-gray-700 text-left max-w-[200px] overflow-ellipsis">@product.Description</td>
                    <td class="p-4 text-xs text-gray-700 text-left">₱@product.Price</td>
                    <td class="p-4 text-xs text-gray-700 text-left">@product.Quantity units</td>
                    <td class="p-4 text-xs text-gray-700 text-left">@product.CreatedAt.ToString()</td>
                    <td class="p-4 text-xs text-gray-700 text-left">@product.UpdatedAt.ToString()</td>
                    <td class="p-4 text-xs text-gray-700 text-left">
                        <button @onclick="() => OpenShowProductModal(product.Id)" class="cursor-pointer"><i class="fa-solid fa-eye text-gray-400"></i></button>
                        <button @onclick="() => OpenUpdateModal(product)" class="cursor-pointer"><i class="fa-solid fa-pen-to-square text-gray-400"></i></button>
                        <button @onclick="() => OpenDeleteModal(product.Id)" class="cursor-pointer"><i class="fa-solid fa-trash text-red-800"></i></button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
    
</div>
<EditForm Model="@ProductFormModel" OnValidSubmit="@HandleCreateSubmit" FormName="CreateProductForm">
    <ModalPopup 
    Title="Create a Product" 
    ShowFooter="true" 
    IsVisible="@ShowCreateModal" 
    IsVisibleChanged="@((val) => ShowCreateModal = val)"
    OnClose="() => CloseModal()"
    >
        <span>Fill in the details below to create a product.</span>

        @if(message is not null){
            <div class="mt-4 mb-4">
                <span class="text-gray-500">@message</span>
            </div>
        }

        <DataAnnotationsValidator />
        
        <div class="text-red-500">
            <ValidationSummary class="mt-4 mb-4"/>
        </div>
        <InputField 
            Id="name"
            T="string"
            Label="Product Name"
            Placeholder="Enter product name here..."
            @bind-Value="@ProductFormModel.Name"
        />
        <InputField 
            Id="description"
            T="string"
            Label="Description"
            Placeholder="Enter description here..."
            @bind-Value="@ProductFormModel.Description"
        />
        <InputField 
            Id="price"
            T="decimal"
            Label="Price"
            Placeholder="Enter price here..."
            @bind-Value="@ProductFormModel.Price"
        />
        <InputField 
            Id="quantity"
            T="int"
            Label="Stock"
            Placeholder="Enter units here..."
            @bind-Value="@ProductFormModel.Quantity"
        />
            
    </ModalPopup>
</EditForm>
<EditForm Model="@UpdateProductFormModel" OnValidSubmit="HandleUpdateSubmit" FormName="UpdateProductForm">
    <ModalPopup 
    Title="Update Product" 
    ShowFooter="true" 
    IsVisible="@ShowUpdateModal" 
    IsVisibleChanged="@((val) => ShowUpdateModal = val)"
    OnClose="() => CloseModal()"
    >
        <span>Update existing details of the product here.</span>

        @if (message is not null)
        {
            <div class="mt-4 mb-4">
                <span class="text-gray-500">@message</span>
            </div>
        }

        <DataAnnotationsValidator />
            
        <div class="text-red-500">
            <ValidationSummary class="mt-4 mb-4"/>
        </div>
        <InputField 
            Id="name"
            T="string"
            Label="Product Name"
            Placeholder="Enter product name here..."
            @bind-Value="@UpdateProductFormModel.Name"
        />
        <InputField 
            Id="description"
            T="string"
            Label="Description"
            Placeholder="Enter description here..."
            @bind-Value="@UpdateProductFormModel.Description"
        />
        <InputField 
            Id="price"
            T="decimal"
            Label="Price"
            Placeholder="Enter price here..."
            @bind-Value="@UpdateProductFormModel.Price"
        />
        <InputField 
            Id="quantity"
            T="int"
            Label="Stock"
            Placeholder="Enter units here..."
            @bind-Value="@UpdateProductFormModel.Quantity"
        />
    </ModalPopup>
</EditForm>

<ModalPopup 
Title="Delete Product" 
ShowFooter="true" 
IsVisible="@ShowDeleteModal" 
IsVisibleChanged="@((val) => ShowDeleteModal = val)" 
OnConfirm="HandleDeleteSubmit"
OnClose="() => CloseModal()"
>
    <p>Are you sure you want to delete this product?</p>
    @if(message is not null)
    {
        <div>
            <span>@message</span>
        </div>
    }
</ModalPopup>
<ModalPopup
    Title="Product"
    ShowFooter=false
    IsVisible=ShowProductModal
    IsVisibleChanged="@((val) => ShowProductModal = val)"
    OnClose="() => CloseModal()"
>
    @if(selectedProductDetails == null)
    {
        <div>
            <span class="text-red-500">No product found</span>
        </div>
    } else {
        <div class="flex gap-4">
            <div class="flex flex-col">
                <div class="font-semibold">Product ID</div>
                <div>Name:</div>
                <div>Description</div>
                <div>Price</div>
                <div>Stocks</div>
            </div>
            <div class="flex flex-col">
                <div><span>@selectedProductDetails.Id</span></div>
                <div><span>@selectedProductDetails.Name</span></div>
                <div><span>@selectedProductDetails.Description</span></div>
                <div><span>₱@selectedProductDetails.Price</span></div>
                <div><span>@selectedProductDetails.Quantity units</span></div>
            </div>
        </div>
    }
    
</ModalPopup>

@code {
    private Guid? selectedProductId;
    private ProductItem? selectedProductDetails;
    [SupplyParameterFromForm]
    private ProductFormModel? ProductFormModel {get; set;}
    private UpdateProductFormModel? UpdateProductFormModel { get; set; }
    private bool ShowProductModal = false;
    private bool ShowCreateModal = false;
    private bool ShowUpdateModal = false;
    private bool ShowDeleteModal = false;
    private List<ProductItem>? products;
    private string? message;

    protected override async Task OnInitializedAsync(){
        headerDataService.Title = "Manage Products";
        ProductFormModel = new();
        UpdateProductFormModel = new();

        products = await productService.GetProductsAsync();

    }

    private void CloseModal()
    {
        selectedProductId = null;
        message = string.Empty;
        ClearForm();
    }

    private async Task OpenShowProductModal(Guid id){
        selectedProductId = id;

        /** 
                    I can just map the product coming from the table to the selectedProductDetails but for the sake of the requirements,
                    I will get the details through the endpoint using the id instead of the product itself
    **/
                selectedProductDetails = await productService.GetProductAsync(id);

        ShowProductModal = true;
    }

    private void OpenUpdateModal(ProductItem product)
    {
        selectedProductId = product.Id;

        UpdateProductFormModel = new UpdateProductFormModel
        {
            Id = product.Id,
            Name = product.Name,
            Description = product.Description,
            Price = product.Price,
            Quantity = product.Quantity
        };

        ShowUpdateModal = true;
    }

    private void OpenDeleteModal(Guid productId)
    {
        selectedProductId = productId;
        ShowDeleteModal = true;
    }

    private async Task HandleCreateSubmit()
    {
        HttpResponseMessage response = await productService.AddProductAsync(ProductFormModel);
        if (response.IsSuccessStatusCode)
        {
            message = $"Product '{ProductFormModel.Name}' added successfully!";
            products = await productService.GetProductsAsync();
        }
        else
        {
            string responseText = await response.Content.ReadAsStringAsync();
            message = $"Failed to add product: {response.StatusCode} {responseText}";
        }

        StateHasChanged();
    }
    private async Task HandleUpdateSubmit()
    {
        HttpResponseMessage response = await productService.UpdateProductAsync(UpdateProductFormModel);
        if(response.IsSuccessStatusCode)
        {
            message = "Product was updated successfully!";
            products = await productService.GetProductsAsync();
        } else {
            string responseText = await response.Content.ReadAsStringAsync();
            message = $"Failed to update product: {response.StatusCode} {responseText}";
        }
        StateHasChanged();
    }

    private async Task HandleDeleteSubmit()
    {
        if(selectedProductId == null)
        {
            message = "No selected product";
            return;
        }
        HttpResponseMessage response = await productService.DeleteProductAsync(selectedProductId.Value);
        if(response.IsSuccessStatusCode)
        {
            message = $"Product removed successfully!";
            products = await productService.GetProductsAsync();
        } else
        {
            string responseText = await response.Content.ReadAsStringAsync();
            message = $"Failed to remove product: {response.StatusCode} {responseText}";
        }
    }

    private void ClearForm() => ProductFormModel = new();


}