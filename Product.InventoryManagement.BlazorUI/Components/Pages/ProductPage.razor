@page "/product"

@using Product.InventoryManagement.Application.DTOs
@using Product.InventoryManagement.BlazorUI.Services.Contracts;
@using Product.InventoryManagement.BlazorUI.Components.Common;

@rendermode InteractiveServer
@inject HeaderDataService headerDataService;
@inject IProductService productService;

<div>
    <span>This is where you can efficiently oversee your inventory by adding, editing, or removing products with ease</span>
    <div class="flex justify-between">
        <div>
            <InputField Id="search-filter" Placeholder="Search by name or ID here..." Type="text" />
        </div>
        <div>
            <Button HandeOnClick="() => ShowCreateModal = true" Label="Add New Product" Type="normal"/>
        </div>
    </div>
    <table class="w-full">
        <thead class="text-xs text-gray-800 border-b-1 border-b-gray-300 table-header-group">
            <tr>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Product ID</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Name</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Description</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Price</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Stock</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Date Added</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Last Modified</th>
                <th class="p-4 text-xs font-bold tracking-wide text-left">Action</th>
            </tr>
        </thead>
        <tbody>
        @if(products == null)
        {
            <div>
                    <span class="text-gray-500">Loading products...</span>
            </div>
        } else
        {
            @foreach (var product in products)
            {
                <tr class="even:bg-gray-100 odd:bg-white">
                    <td class="p-4 text-xs text-gray-700 text-left">@product.Id</td>
                    <td class="p-4 text-xs text-gray-700 text-left">@product.Name</td>
                    <td class="p-4 text-xs text-gray-700 text-left max-w-[200px] overflow-ellipsis">@product.Description</td>
                    <td class="p-4 text-xs text-gray-700 text-left">â‚±@product.Price</td>
                    <td class="p-4 text-xs text-gray-700 text-left">@product.Quantity units</td>
                    <td class="p-4 text-xs text-gray-700 text-left">@product.CreatedAt.ToString()</td>
                    <td class="p-4 text-xs text-gray-700 text-left">@product.UpdatedAt.ToString()</td>
                    <td class="p-4 text-xs text-gray-700 text-left">
                        <button @onclick="() => ShowUpdateModal = true" class="cursor-pointer"><i class="fa-solid fa-pen-to-square text-gray-400"></i></button>
                        <button @onclick="() => ShowDeleteModal = true" class="cursor-pointer"><i class="fa-solid fa-trash text-red-800"></i></button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
    
</div>
<ModalPopup Title="Create a Product" ShowFooter="true" IsVisible="@ShowCreateModal" IsVisibleChanged="@((val) => ShowCreateModal = val)">
    <span>Create modal here</span>
</ModalPopup>
<ModalPopup Title="Update Product" ShowFooter="true" IsVisible="@ShowUpdateModal" IsVisibleChanged="@((val) => ShowUpdateModal = val)">
    <span>Update modal here</span>
</ModalPopup>
<ModalPopup Title="Delete Product" ShowFooter="true" IsVisible="@ShowDeleteModal" IsVisibleChanged="@((val) => ShowDeleteModal = val)">
    <p>Are you sure you want to delete this product?</p>
</ModalPopup>


@code {
    private bool ShowCreateModal = false;
    private bool ShowUpdateModal = false;
    private bool ShowDeleteModal = false;
    private List<Domain.Entities.Product>? products;

    protected override async Task OnInitializedAsync(){
        headerDataService.Title = "Manage Products";
        products = await productService.GetProductsAsync();
    }


}