@if (IsVisible)
{
    <div class="fixed inset-0 flex items-center justify-center transition-colors z-50 bg-black/20 bg-opacity-50">
        <div class="@($"max-w-[500px] bg-white rounded-xl shadow p-6 transition-all {(IsVisible ? "scale-100 opacity-100" : "scale-125 opacity-0")}")">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">@Title</h2>
                <button class="text-gray-500 hover:text-gray-800 cursor-pointer" @onclick="Close">
                    <i class="fa-solid fa-xmark text-gray-600"></i>
                </button>
            </div>
            <div>
                @ChildContent
            </div>
            @if (ShowFooter)
            {
                <div class="flex justify-end gap-2 mt-6">
                    <Button HandeOnClick="@Close" Label="Cancel" Type="secondary"/>
                    <Button ButtonType="submit" HandeOnClick="@Confirm" Label="Confirm" Type="normal"/>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public string Title { get; set; } = "Modal Title";
    [Parameter] public bool ShowFooter { get; set; } = true;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnClose {  get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task Confirm()
    {
        await OnConfirm.InvokeAsync();
    }
}
